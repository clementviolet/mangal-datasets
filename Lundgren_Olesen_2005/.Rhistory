Descendant_cohorte <- sum(table[,8], na.rm = T)
graph_lx <- plot(lx~x, xlab = 'Age', ylab = 'lx', log= 'y', type = 'l', main = 'Courbe de survie')
graph_lx
###Exercice 3###
table <- matrix(data = NA, nrow = 4, ncol = 10)
col <- c("x", "Nx", "Mx", "lx", "Sx", "dx", "bx", "Bx", "lx*bx", "x*lx*bx")
row <- c("0", "1", "2", "3")
colnames(table) <- col
rownames(table) <- row
table
x <- c(0:3)
Nx <- c(50, 45, 40.5, 36.45)
bx <- c(0, 0, 4, 50)
Bx < bx*Nx
table[,1] <- x
table[,2] <- Nx
table[,7] <- bx
table[,8] <- Bx
Mx <- Nx[1:3] - Nx[2:4]
table[1:3,3] <- Mx
table[4,3] <- 36.45
lx <- Nx/Nx[1]
table[,4] <- lx
table
Sx <- c(0.9, 0.9, 0.9, 0)
table[,5] <- Sx
dx <- 1-Sx
table[,6] <- dx
table[,9] <- lx*bx
table[,10] <- x*lx*bx
table
R0_taux_remplacement <- sum(table[,9], na.rm = T)
R0_taux_remplacement
Tg_temps_génération <- sum(table[,10], na.rm = T)/R0_taux_remplacement
Tg_temps_génération
Descendant_cohorte <- sum(table[,8], na.rm = T)
Descendant_cohorte
graph_lx <- plot(lx~x, xlab = 'Age', ylab = 'lx', log= 'y', type = 'l', main = 'Courbe de survie')
graph_lx
###Exercice 3###
table <- matrix(data = NA, nrow = 4, ncol = 10)
col <- c("x", "Nx", "Mx", "lx", "Sx", "dx", "bx", "Bx", "lx*bx", "x*lx*bx")
row <- c("0", "1", "2", "3")
colnames(table) <- col
rownames(table) <- row
table
x <- c(0:3)
Nx <- c(50, 45, 40.5, 36.45)
bx <- c(0, 0, 4, 50)
Bx <- bx*Nx
table[,1] <- x
table[,2] <- Nx
table[,7] <- bx
table[,8] <- Bx
Mx <- Nx[1:3] - Nx[2:4]
table[1:3,3] <- Mx
table[4,3] <- 36.45
lx <- Nx/Nx[1]
table[,4] <- lx
table
Sx <- c(0.9, 0.9, 0.9, 0)
table[,5] <- Sx
dx <- 1-Sx
table[,6] <- dx
table[,9] <- lx*bx
table[,10] <- x*lx*bx
table
R0_taux_remplacement <- sum(table[,9], na.rm = T)
R0_taux_remplacement
Tg_temps_génération <- sum(table[,10], na.rm = T)/R0_taux_remplacement
Tg_temps_génération
Descendant_cohorte <- sum(table[,8], na.rm = T)
Descendant_cohorte
graph_lx <- plot(lx~x, xlab = 'Age', ylab = 'lx', log= 'y', type = 'l', main = 'Courbe de survie')
graph_lx
###Exercice 3###
table <- matrix(data = NA, nrow = 4, ncol = 10)
col <- c("x", "Nx", "Mx", "lx", "Sx", "dx", "bx", "Bx", "lx*bx", "x*lx*bx")
row <- c("0", "1", "2", "3")
colnames(table) <- col
rownames(table) <- row
table
x <- c(0:3)
Nx <- c(50, 45, 40.5, 36.45)
bx <- c(0, 0, 4, 50)
Bx <- bx*Nx
table[,1] <- x
table[,2] <- Nx
table[,7] <- bx
table[,8] <- Bx
Mx <- Nx[1:3] - Nx[2:4]
table[1:3,3] <- Mx
table[4,3] <- 36.45
lx <- Nx/Nx[1]
table[,4] <- lx
table
Sx <- c(0.9, 0.9, 0.9, 0)
table[,5] <- Sx
dx <- 1-Sx
table[,6] <- dx
table[,9] <- lx*bx
table[,10] <- x*lx*bx
table
R0_taux_remplacement_F <- sum(table[,9], na.rm = T)
R0_taux_remplacement_F
Tg_temps_génération <- sum(table[,10], na.rm = T)/R0_taux_remplacement
Tg_temps_génération
Descendant_F_cohorte <- sum(table[,8], na.rm = T)
Descendant_F_cohorte
Descendant_T_cohorte <- Descendant_F_cohorte*2
Descendant_T_cohorte
graph_lx <- plot(lx~x, xlab = 'Age', ylab = 'lx', log= 'y', type = 'l', main = 'Courbe de survie')
###Exercice 3###
table <- matrix(data = NA, nrow = 4, ncol = 10)
col <- c("x", "Nx", "Mx", "lx", "Sx", "dx", "bx", "Bx", "lx*bx", "x*lx*bx")
row <- c("0", "1", "2", "3")
colnames(table) <- col
rownames(table) <- row
table
x <- c(0:3)
Nx <- c(50, 45, 40.5, 36.45)
bx <- c(0, 0, 4, 50)
Bx <- bx*Nx
table[,1] <- x
table[,2] <- Nx
table[,7] <- bx
table[,8] <- Bx
Mx <- Nx[1:3] - Nx[2:4]
table[1:3,3] <- Mx
table[4,3] <- 36.45
lx <- Nx/Nx[1]
table[,4] <- lx
table
Sx <- c(0.9, 0.9, 0.9, 0)
table[,5] <- Sx
dx <- 1-Sx
table[,6] <- dx
table[,9] <- lx*bx
table[,10] <- x*lx*bx
table
R0_taux_remplacement_F <- sum(table[,9], na.rm = T)
R0_taux_remplacement_F
Tg_temps_génération <- sum(table[,10], na.rm = T)/R0_taux_remplacement
Tg_temps_génération
Descendant_F_cohorte <- sum(table[,8], na.rm = T)
Descendant_F_cohorte
Descendant_T_cohorte <- Descendant_F_cohorte*2
Descendant_T_cohorte
graph_lx <- plot(lx~x, xlab = 'Age', ylab = 'lx', log= 'y', type = 'l', main = 'Courbe de survie')
install.packages(BIEN)
library(BIEN)
g
SLA_TRY <- read.delim("C:/Users/Dell_Gabriel/Desktop/TRY/SLA_TRY.txt")
View(SLA_TRY)
names(SLA_TRY)
table(SLA_TRY)
summary(table())
summary(SLA_TRY)
populus <- subset(SLA_TRY, select = c("AccSpeciesID", "OrigValueStr", "OrigUnitStr",) )
arbres <- subset(SLA_TRY, select = c("AccSpeciesID", "OrigValueStr", "OrigUnitStr") )
table(arbres)
head(arbres)
arbres <- subset(SLA_TRY, select = c("AccSpeciesName", "OrigValueStr", "OrigUnitStr") )
head(arbres)
table(arbres)
summary(arbres)
arbres <- subset(SLA_TRY, TraitID == 3116, select = c("AccSpeciesName", "OrigValueStr", "OrigUnitStr") )
head(arbres)
summary(arbre)
summary(arbres)
populus <- subset(arbres, AccSpeciesName == "Populus tremuloides")
head(populus)
prunus <- subset(arbres, AccSpeciesName == "Prunus serotina")
prunus
arbres <- subset(SLA_TRY, TraitID == 3116, select = c("AccSpeciesName", "OrigValueStr", "OrigUnitStr", "ValueKindName") )
source('~/.active-rstudio-document')
populus <- subset(arbres, AccSpeciesName == "Populus tremuloides")
prunus <- subset(arbres, AccSpeciesName == "Prunus serotina")
prunus
populus
Try20171016203621FunctionalEcologyFE.2014.00595.R2 <- read.csv("C:/Users/Dell_Gabriel/Desktop/Try20171016203621FunctionalEcologyFE-2014-00595.R2.zip", sep="")
View(Try20171016203621FunctionalEcologyFE.2014.00595.R2)
View(Try20171016203621FunctionalEcologyFE.2014.00595.R2)
load("C:/Users/Dell_Gabriel/Desktop/StageGravel/ncbi_taxons.rda")
load("C:/Users/Dell_Gabriel/Desktop/StageGravel/ncbi_taxons.rda")
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list of json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(any(class(df) == "data.frame")){
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) df[[i]] <- jsonlite::toJSON(df[[i]], auto_unbox = TRUE, digits = 12)
return(df)
} else {
ls <- list()
ls[[1]] <- jsonlite::toJSON(df, auto_unbox = TRUE, digits = 12)
return(ls)
}
}
#' @title GET id key from a Mangal entry
#'
#' @description GET primary key of a table entry specified by the user
#'
#' @param table A element, must be the name of the targeted table with ""
#' @param attribute A element, must be the name of the targeted attribute with ""
#' @param value A element, must be the value of the targeted attribute with ""
#'
#' @return
#'
#' The value of the primary key of a specified entry
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr content
GET_fkey <- function(table, attribute, value){
# Connect to API
server <- "http://localhost:3000"
# Set the table and name as path
url <- httr::modify_url(server, path = paste0("/api/v0/", table, "?", attribute, "=", value))
# Change space in url by "_"
url <- gsub(" ", "%20", url)
# Retreive data from Mangal
data <- httr::GET(url)
data <- httr::content(data)
# Get data into vector
data <- unlist(data)
if(is.null(data[[1]] == TRUE)){
print("wrong attribute, check spelling; value or table inexistant, no associated id")
} else {
return(data[[1]])
}
}
install_github("gabrielbouleau/mangal.package")
devtools::install_github("gabrielbouleau/mangal.package")
?split
POST_taxons
devtools::install_github("gabrielbouleau/mangal.package")
devtools::install_github("gabrielbouleau/mangal.package")
devtools::install_github("gabrielbouleau/mangal.package")
# Set libraries
library(reshape2)
library(tidyr)
library(jsonlite)
library(httr)
library(data.table)
library(rcrossref)
library(taxize)
library(stringr)
devtools::install_github("gabrielbouleau/mangal.package")
library(mangal)
lat  <- 66.9667
lon  <- -50.55
srid <- 4326
attr_inter <- list(name        = "Presence/Absence",
table_owner = "interactions",
description = "Presence or absence of a recorded interaction",
unit        = "null")
refs <- list(doi    = "null",
jstor  = "null",
pmid   = "null",
paper_url = "null",
data_url  = "null",
author    = "Witt",
year      = "1998",
bibtex = "null")
users <- list(name         = "Gabriel Bergeron",
email        = "gabriel.bergeron3@usherbrooke.ca",
orcid        = "null",
organization = "Universite de Sherbrooke",
type         = "administrator")
enviro <- list(name  = "NAME",
lat   = lat,
lon   = lon,
srid  = srid,
date  = "1998-01-01",
value = 0)
datasets <- list(name        = "Witt_1998",
date        = "1998-01-01",
description = "null",
public      = TRUE)
traits <- list(date = "1998-01-01")
networks <- list(name             = "Witt_1998",
date             = "1998-01-01",
lat              = lat,
lon              = lon,
srid             = srid,
description      = "null",
public           = TRUE,
all_interactions = FALSE)
inter <- list(taxon_1_level = "taxon",
taxon_2_level = "taxon",
date          = "1998-01-01",
direction     = "unknown",
type          = "unknown",
method        = "null",
description   = "null",
public        = TRUE,
lat           = lat,
lon           = lon,
srid          = srid)
#------------------------------
# Throwing injection functions
#------------------------------
POST_attributes(attr_inter)
# POST_attributes(attr1)
# POST_attributes(attr2)
POST_refs()
# Check if the datasets already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","datasets/?name=",
datasets[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
View(datasets)
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[["name"]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[["name"]]))
}
users[["name"]]
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[["name"]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[["name"]]))
}
View(datasets)
datasets[[-"user_id"]]
datasets <- list(name        = "Witt_1998",
date        = "1998-01-01",
description = "null",
public      = TRUE)
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[["name"]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[["name"]]))
}
View(datasets)
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?data_url=", refs[["data_url"]])), config = config))) != 0){
datasets <- c(datasets, ref_id = GET_fkey("refs", c("author", "year"), c(refs[["author"]], refs[["year"]])))
}
View(datasets)
paste0(server, "/api/v0/users/?name=", users[["name"]])), config = config)
paste0(server, "/api/v0/refs/?data_url=", refs[["data_url"]]))
paste0(server, "/api/v0/refs/?data_url=", refs[["data_url"]])
gsub(" ", "%20", paste0(server, "/api/v0/refs/?data_url=", refs[["data_url"]]))
httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?data_url=", refs[["data_url"]])), config = config)
content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?data_url=", refs[["data_url"]])), config = config))
gsub(" ", "%20", paste0(server, "/api/v0/refs/?author=", refs[["author"]], "&year=", refs[["year"]]
)
)
httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?author=", refs[["author"]], "&year=", refs[["year"]])), config = config)
(length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?author=", refs[["author"]], "&year=", refs[["year"]])), config = config))) != 0)
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?author=", refs[["author"]], "&year=", refs[["year"]])), config = config))) != 0){
datasets <- c(datasets, ref_id = GET_fkey("refs", c("author", "year"), c(refs[["author"]], refs[["year"]])))
}
View(datasets)
View(datasets)
# Datasets_df as a json list
datasets_lst <- json_list(data.frame(datasets))
# Inject  to datasets table
POST_table(datasets_lst, "datasets")
print("datasets done")
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[["name"]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[["name"]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?author=", refs[["author"]], "&year=", refs[["year"]])), config = config))) != 0){
datasets <- c(datasets, ref_id = GET_fkey("refs", c("author", "year"), c(refs[["author"]], refs[["year"]])))
}
# Datasets_df as a json list
datasets_lst <- json_list(data.frame(datasets))
# Inject  to datasets table
POST_table(datasets_lst, "datasets")
print("datasets done")
} else {
print("dataset already in mangal")
}
lat  <- -24.2653
lon  <- -48.4069
srid <- 4326
attr_inter <- list(name  = "Presence/Absence",
table_owner = "interactions",
description = "Presence or absence of a recorded interaction",
unit        = "null")
refs <- list(doi       = "10.1079/9780851995250.0423",
jstor     = "null",
pmid      = "null",
paper_url = "https://www.researchgate.net/publication/237371343_Patterns_of_Fruit-Frugivore_Interactions_in_Two_Atlantic_Forest_Bird_Communities_of_South-eastern_BrazilImplications_for_Conservation",
data_url  = "null",
author    = "Silva",
year      = "2002",
bibtex    = "@article{article, author = {Silva, Wesley and De Marco Júnior, Paulo and Hasui, Erica and Gomes, Verônica}, year = {2002}, month = {01}, pages = {}, title = {Patterns of Fruit-Frugivore Interactions in Two Atlantic Forest Bird Communities of South-eastern Brazil:Implications for Conservation}}")
users <- list(name         = "Gabriel Bergeron",
email        = "gabriel.bergeron3@usherbrooke.ca",
orcid        = "null",
organization = "Universite de Sherbrooke",
type         = "administrator")
enviro <- list(name  = "NAME",
lat   = lat,
lon   = lon,
srid  = srid,
date  = "2000-03-01",
value = 0)
datasets <- list(name        = "Silva_2002",
date        = "2000-03-01",
description = "Fruit-bird interaction at the Intervales State Park, Brazil",
public      = TRUE)
traits <- list(date = "2000-03-01")
networks <- list(name             = "Silva_2002",
date             = "2000-03-01",
lat              = lat,
lon              = lon,
srid             = srid,
description      = "Fruit-bird interaction at the Intervales State Park, Brazil",
public           = TRUE,
all_interactions = FALSE)
inter <- list(taxon_1_level = "taxon",
taxon_2_level = "taxon",
date          = "1111-11-11",
direction     = "directed",
type          = "mutualism",
method        = "Field observation/fecal analysis",
description   = "Bird feeding on the fruit",
public        = TRUE,
lat           = lat,
lon           = lon,
srid          = srid)
# POST_environments(enviro, attr_##)
POST_datasets()
#' @title POST data into the Mangal datasets table
#'
#' @description GET foreign keys needed for the 'datasets' table then POST
#'    the metadata associated. 'users' and 'refs' tables must be POST
#'    before.
#'
#' @return
#'
#' The status of the injection:
#' 'dataset' already in mangal' means that the dataset name already have an id
#' 'dataset done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
#'
#' @export
## Create and inject datasets table ##
POST_datasets <- function(){
# Check if the datasets already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","datasets/?name=",
datasets[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[["name"]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[["name"]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?author=", refs[["author"]], "&year=", refs[["year"]])), config = config))) != 0){
datasets <- c(datasets, ref_id = GET_fkey("refs", c("author", "year"), c(refs[["author"]], refs[["year"]])))
}
# Datasets_df as a json list
datasets_lst <- json_list(data.frame(datasets))
# Inject  to datasets table
POST_table(datasets_lst, "datasets")
print("datasets done")
} else {
print("dataset already in mangal")
}
}
# POST_environments(enviro, attr_##)
POST_datasets()
getwd()
setwd("importation_mangal/Lundgren_Olesen_2005")
setwd(..)
setwd("..")
getwd()
setwd("importation_mangal/Lundgren_Olesen_2005")
setwd("../importation_mangal/Lundgren_Olesen_2005")
setwd("C:\Users\Dell_Gabriel\Desktop\StageGravel")
setwd("C:/Users/Dell_Gabriel/Desktop/StageGravel")
setwd("../importation_mangal/Lundgren_Olesen_2005")
setwd("..importation_mangal/Lundgren_Olesen_2005")
setwd("importation_mangal/Lundgren_Olesen_2005")
getwd()
